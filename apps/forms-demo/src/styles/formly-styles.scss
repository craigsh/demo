@use 'sass:string';

@import 'theme-variables';
@import 'theme-variables';

form {
	margin-inline: auto;
	border: 1px solid #aaa;
	border-radius: 0.5rem;
	padding: 1rem;
	max-width: 1400px;
}

formly-form {
	display: block;
}

.height-100pct {
	height: 100%;
}

$width-100-pct: 100%;

$flex-row-gap: 0.5rem;

$flex-column-gap: 1rem;
$flex-half-column-gap: calc($flex-column-gap / 2);

$control-bottom-margin: 0.5rem;
$control-bottom-padding: 0.5rem;

formly-wrapper-mat-form-field {
	display: block;
	width: 100%;
}

formly-field {
	display: block;
	flex-shrink: 0;
	flex-grow: 0;

	.field-size-1 {
		flex-basis: calc($width-100-pct/6 - $flex-column-gap);
		> mat-form-field {
			max-width: 200px;
		}
	}

	.field-size-2 {
		flex-basis: calc($width-100-pct/3 - $flex-column-gap);
		> mat-form-field {
			max-width: 400px;
		}
	}

	.field-size-3,
	.field-size-50 {
		flex-basis: calc($width-100-pct/2 - $flex-column-gap);
		> mat-form-field {
			max-width: 600px;
		}
	}

	.field-size-4 {
		flex-basis: calc($width-100-pct/3 * 2 - $flex-column-gap);
		> mat-form-field {
			max-width: 800px;
		}
	}

	.field-size-5 {
		flex-basis: calc($width-100-pct/6 * 5 - $flex-column-gap);
		> mat-form-field {
			max-width: 1000px;
		}
	}

	.field-size-6,
	.field-size-100 {
		flex-basis: $width-100-pct;
	}

	.field-size-25 {
		flex-basis: calc($width-100-pct / 4 - $flex-column-gap);
	}

	.field-size-40 {
		flex-basis: calc($width-100-pct / 10 * 4 - $flex-column-gap);
	}

	.field-size-60 {
		flex-basis: calc($width-100-pct / 10 * 6 - $flex-column-gap);
	}

	.field-size-75 {
		flex-basis: calc($width-100-pct / 4 * 3 - $flex-column-gap);
	}

	.mat-form-field-infix {
		min-width: 10px;
		width: unset;
	}

	@media (max-width: 1023px) {
		.field-size-1 {
			flex-basis: calc($width-100-pct/3 - $flex-column-gap);
		}

		.field-size-2 {
			flex-basis: calc($width-100-pct/2 - $flex-column-gap);
		}

		.field-size-3,
		.field-size-4,
		.field-size-5,
		.field-size-6 {
			flex-basis: $width-100-pct;
		}
	}
}

formly-field.no-max-width {
	mat-form-field {
		max-width: unset;
	}
}

/*
 * Inside a flex row, with the flex-row-inner class, reduce the gap between the fields.
 */
.flex-row.flex-row-inner {
	$flex-column-gap: $flex-half-column-gap;

	padding-bottom: 0;

	.field-size-1 {
		flex-basis: calc($width-100-pct/6 - $flex-column-gap);
	}

	.field-size-2 {
		flex-basis: calc($width-100-pct/3 - $flex-column-gap);
	}

	.field-size-3,
	.field-size-50 {
		flex-basis: calc($width-100-pct/2 - $flex-column-gap);
	}

	.field-size-4 {
		flex-basis: calc($width-100-pct/3 * 2 - $flex-column-gap);
	}

	.field-size-5 {
		flex-basis: calc($width-100-pct/6 * 5 - $flex-column-gap);
	}

	.field-size-25 {
		flex-basis: calc($width-100-pct / 4 - $flex-column-gap);
	}

	.field-size-40 {
		flex-basis: calc($width-100-pct / 10 * 4 - $flex-column-gap);
	}

	.field-size-60 {
		flex-basis: calc($width-100-pct / 10 * 6 - $flex-column-gap);
	}

	.field-size-75 {
		flex-basis: calc($width-100-pct / 4 * 3 - $flex-column-gap);
	}
}

formly-group {
	display: block;
}

formly-field {
	max-width: 100%;
}

.flex-row {
	display: flex;
	flex-wrap: wrap;
	align-items: baseline;
	column-gap: $flex-column-gap;
	row-gap: $flex-row-gap;
	&.top-level {
		width: calc(100% + $flex-column-gap);
	}

	&.flex-row-align-start {
		align-items: flex-start;
	}
	&.flex-row-align-center {
		align-items: center;
	}
	&.flex-row-align-end {
		align-items: flex-end;
	}
	&.flex-row-align-stretch {
		align-items: stretch;
		padding-bottom: $control-bottom-padding;
	}
	&.flex-row-align-baseline {
		align-items: baseline;
	}

	.flex-row-inner {
		padding-bottom: 0;
	}

	// TODO: Fix - causes horizontal scroll in Job adverts (single child?)

	// margin-right: -$flex-column-gap;

	// > :only-child {
	// 	margin-right: $flex-column-gap;
	// }

	fo-groupbox-wrapper {
		ui-group-box {
			margin-bottom: $control-bottom-margin;
		}
	}

	> *:last-child:not(.no-grow) {
		flex-grow: 1;
	}
}

.flex-column {
	display: flex;
	flex-direction: column;
}

.flex-column-wrapper {
	height: 100%;
	> formly-field {
		height: 100%;

		> formly-group {
			height: 100%;
		}
	}
}

.align-self-start {
	align-self: flex-start;
}

.align-self-stretch {
	align-self: stretch;
}

.align-self-end {
	align-self: flex-end;
}

.flex-align-start {
	align-items: flex-start;
}

.flex-align-end {
	align-items: flex-end;
}

// div.security-wrapper,
// [secsecuredcontrol],
// [ng-reflect-control-name] {
// 	box-shadow: inset 0 0 0 3px red;
// }

formly-field-mat-radio > mat-radio-group > mat-radio-button {
	margin-right: 1rem;
	margin-bottom: $control-bottom-margin;
}

$base-radio-size: 100px;

$radio-sizes: (
	'size-1': calc($base-radio-size / 2),
	'size-2': calc($base-radio-size / 1.3333),
	'size-3': calc($base-radio-size),
	'size-4': calc($base-radio-size * 1.25),
	'size-5': calc($base-radio-size * 1.5),
	'size-6': calc($base-radio-size * 2),
	'size-7': calc($base-radio-size * 2.25),
	'size-8': calc($base-radio-size * 2.5),
	'size-9': calc($base-radio-size * 2.75),
	'size-10': calc($base-radio-size * 3),
);

@each $size-number, $size-value in $radio-sizes {
	$number: string.slice($size-number, 6);

	//	@debug $size-value;

	.radio-#{$number} formly-field-mat-radio > mat-radio-group {
		grid-template-columns: repeat(auto-fit, minmax($size-value, 1fr));
	}
}

formly-field-mat-radio > mat-radio-group {
	$radio-min-width: 120px;
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax($radio-min-width, 1fr));
}

.no-radio-grid formly-field-mat-radio > mat-radio-group {
	display: block;
}

formly-field.border,
formly-field.border-light {
	border: $light-line-border;
	border-radius: 3px;
	padding: 0.5rem;
	padding-bottom: 0;

	&.mgb {
		margin-bottom: $control-bottom-margin;
	}

	&.border-light {
		border: $extra-light-line-border;
	}
}

ui-group-box .border-light {
	border: $extra-light-line-border;
}

// Specific styling for time fields - narrow the input and underline
.fd-time-field {
	--time-field-width: 50px;

	mat-form-field {
		width: 100%;
		input {
			width: var(--time-field-width);
		}

		.mat-form-field-underline {
			width: var(--time-field-width);
		}
	}
}

// Specific styling for time-value fields - narrow the input and underline
.fd-time-value-field {
	--time-value-field-width: 70px;

	&.max-hours-2 {
		--time-value-field-width: 50px;
	}

	mat-form-field {
		width: 100%;
		input {
			width: var(--time-value-field-width);
		}

		.mat-form-field-underline {
			width: var(--time-value-field-width);
		}
	}
}

// Specific styling for number fields - narrow the input and underline
.fd-number-field {
	--number-field-width: 50px;

	&.wide {
		--number-field-width: 100px;
	}

	&.pixel-width {
		--number-field-width: 100%;
	}

	mat-form-field {
		width: 100%;
		input {
			width: var(--number-field-width);
		}

		.mat-form-field-underline {
			width: var(--number-field-width);
		}
	}
}

// Specific styling for date fields
.fd-date-field {
	--date-field-width: 110px;

	mat-form-field {
		max-width: var(--date-field-width);
		input {
			width: var(--date-field-width);
		}

		.mat-form-field-underline {
			width: var(--date-field-width);
		}
	}

	.mat-form-field-suffix {
		width: 1rem;

		mat-datepicker-toggle {
			position: absolute;
			top: -1rem;
		}
	}
}

$check-tree-check-list-min-height: 150px;

.fd-check-list-field,
.fd-check-tree-field {
	margin-bottom: $control-bottom-margin;
	min-height: $check-tree-check-list-min-height;
	display: grid;
	> formly-group {
		height: 100%;
		display: grid;
		grid-template-rows: 1fr auto;
		> :first-child {
			min-height: 0;
		}
	}
}

.fd-ranks-grades-check-list-field {
	margin-bottom: $control-bottom-margin;
	min-height: $check-tree-check-list-min-height;
	> formly-group {
		height: 100%;

		.check-list-wrapper {
			margin-top: -1rem;
			> formly-group {
				height: 100%;
				> formly-field {
					height: 100%;
				}
			}
		}

		mat-radio-button {
			min-width: unset;
		}

		.selectors {
			margin-top: -0.5rem;
		}

		> formly-field {
			height: 100%;

			.fd-check-list-field {
				margin-bottom: 0;
			}

			.ranks-grades-wrapper-group {
				> .wrapper {
					padding-bottom: 0;
				}
			}

			.wrapper > formly-group {
				height: 100%;
				display: grid;
				grid-template-rows: auto 1fr;

				ui-check-list {
					margin-left: -0.5rem;
					margin-right: -0.5rem;

					ui-group-box > .wrapper.no-label.border {
						border: none;
					}
				}
			}
		}
	}
}

.fd-date-range-field {
	margin-bottom: $control-bottom-margin;

	.dates-group {
		display: flex;
		flex-wrap: wrap;

		formly-field {
			padding-right: 0;
		}

		// Remove width: 100%;
		mat-form-field {
			width: unset;
		}

		&.horizontal {
			flex-direction: row;
		}

		&.vertical {
			flex-direction: column;
		}
	}
}

.fd-increment-picker-field .increment-picker-group {
	display: flex;
	gap: 1rem;
}

.fd-html-editor-field {
	margin-bottom: $control-bottom-margin;
}

.fd-radio-field {
	&.force-vertical {
		mat-radio-button {
			width: 100%;
		}
	}

	.mat-form-field-infix {
		padding-bottom: 0;
	}
}

.fd-textarea-field {
	textarea {
		resize: none !important;
		&.read-only {
			border: $light-line-border;
			border-radius: 3px;
			padding: 2px !important;
		}
	}
}

.fd-security-group-access-field {
	margin-bottom: $control-bottom-margin;
}

.fd-security-group-tree-field {
	margin-bottom: $control-bottom-margin;
}

.fd-button-field {
	&.button-flex-end {
		display: flex;
		justify-content: flex-end;
	}
}

.fd-tabs-field {
	margin-bottom: $control-bottom-margin;
}

.fd-transportable-outlet-field {
	height: 100%;
}

.fd-staff-masters-field-wrapper {
	.fd-staff-masters-field {
		> .staff-masters-group {
			.mat-form-field-wrapper {
				padding-bottom: 0;

				.mat-form-field-underline {
					transform: translateY((1rem));
				}
			}
		}
	}
}

$base-vh-size: 10vh;

$vh-sizes: (
	'size-10': calc($base-vh-size * 1),
	'size-15': calc($base-vh-size * 1.5),
	'size-20': calc($base-vh-size * 2),
	'size-25': calc($base-vh-size * 2.5),
	'size-30': calc($base-vh-size * 3),
	'size-35': calc($base-vh-size * 3.5),
	'size-40': calc($base-vh-size * 4),
	'size-45': calc($base-vh-size * 4.5),
	'size-50': calc($base-vh-size * 5),
	'size-60': calc($base-vh-size * 6),
	'size-70': calc($base-vh-size * 7),
	'size-80': calc($base-vh-size * 8),
	'size-90': calc($base-vh-size * 9),
	'size-100': calc($base-vh-size * 10),
);

// Build vh (view height), mh (min-height), and mxh (max-height) classes
// e.g. vh-30 === height: 30vh, mh-30 === min-height: 30vh, mxh-30 === max-height: 30vh
@each $size-number, $size-value in $vh-sizes {
	$number: string.slice($size-number, 6);
	$numberPx: $number + '0px';

	//	@debug $size-value;

	.vh-#{$number} {
		height: $size-value;
	}

	.mh-#{$number} {
		min-height: max(#{$numberPx}, #{$size-value});
	}

	.mxh-#{$number} {
		max-height: $size-value;
	}
}

// Build width-{999}pct classes - e.g. width-100pct for 100%
@for $i from 10 through 100 {
	.width-#{$i}pct {
		width: #{$i}#{'%'};
	}
}

// Build mw (min-width) classes - 10 - 1000px
@for $i from 1 through 100 {
	.mw-#{calc($i * 10)} {
		min-width: #{calc($i * 10)}px;
		flex-grow: 1;
	}
}

// Build mxw (max-width) classes - 10 - 1000px
@for $i from 1 through 100 {
	.mxw-#{calc($i * 10)} {
		max-width: min(100%, #{calc($i * 10)}px);
	}
}

// Styling for a form field with a read-only display as content. Remove the underline so it's not mistaken for an input.
mat-form-field.ro-display {
	div.mat-form-field-underline {
		display: none;
	}
}

// Styling for form fields, input readonly so they hide the underline.
mat-form-field.readonly {
	div.mat-form-field-underline {
		display: none;
	}
}

ui-group-box:not(.no-bottom-margin) {
	margin-bottom: $control-bottom-margin;
}

ui-group-box.bottom-padding {
	padding-bottom: $control-bottom-margin;
}

formly-field.shallow {
	.mat-form-field-wrapper {
		padding-bottom: 0;
		.mat-form-field-infix {
			border-top: 0;
		}
	}
}

formly-field.shallow-top {
	.mat-form-field-wrapper {
		.mat-form-field-infix {
			border-top: 0;
		}
	}
}

.fd-security-group-tree-field-grid {
	.wrapper {
		> formly-group {
			height: 100%;
			display: grid;
			grid-template-rows: auto 1fr;
		}

		.fd-check-tree-field {
			height: 100%;
			> formly-group {
				height: 100%;
				> formly-field {
					height: 100%;
				}
			}
		}
	}
}

// TODO: generalise into multiple columns
.grid-2-col {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	column-gap: 1rem;
}

.grid-max-auto {
	height: 100%;
	display: grid;
	grid-template-rows: 1fr min-content;
	row-gap: $control-bottom-margin;

	:nth-child(1) {
		min-height: 0;
	}
}

.grid-auto-max {
	height: 100%;
	display: grid;
	grid-template-rows: min-content 1fr;
	row-gap: $control-bottom-margin;

	:nth-child(2) {
		min-height: 0;
	}
}

.empty-template {
	visibility: hidden;
	display: none;
	height: 0;
}

.flex-1 {
	flex: 1;
}

.overflow-hidden {
	overflow: hidden;
}

.sub-inline-form {
	width: 100%;
	display: flex;
	align-items: center;
	gap: 1rem;
	padding-right: 0.5rem;
}

.paragraph-bold {
	font-weight: 500;
}

// A special style for any "undefined" classes appearing in the DOM (which indicates a bug in the code).
.undefined {
	border: 6px dashed red;
	border-radius: 10px;
}

// Classes for setting align-self on flex items.

.align-self-flex-start {
	align-self: flex-start;
}

.align-self-flex-end {
	align-self: flex-end;
}

.align-self-stretch {
	align-self: stretch;
}

.align-self-baseline {
	align-self: baseline;
}

.align-self-center {
	align-self: center;
}
